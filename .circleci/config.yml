version: 2.1

runOnAllTags: &runOnAllTags
  filters:
    tags:
      only: /.*/

runOnAllTagsWithDockerIOPullCtx: &runOnAllTagsWithDockerIOPullCtx
  <<: *runOnAllTags
  context: docker-io-pull

buildLivenessCheck: &buildLivenessCheck
  run:
    name: Ensure workflow is still live
    command: |
      .circleci/check-workflow-live.sh


deleteClusterk8s: &deleteClusterk8s
  run:
    name: Tear down cluster upon failure
    command: |
      gcloud container clusters delete "$CLUSTER_NAME" --async
    when: on_fail


jobs:
  build:
    docker:
      - image: docker.io/stackrox/apollo-ci:jenkins-plugin-0.2.8-1-ga776a448ee
        auth:
          username: $DOCKER_IO_PULL_USERNAME
          password: $DOCKER_IO_PULL_PASSWORD
    working_directory: /home/circleci/jenkins-plugin
    steps:
      - checkout
      - run:
          name: Build and package the Jenkins plugin
          command: |
            ls -lrt
            cd stackrox-k8s-security-platform
            mvn package
            mvn hpi:hpi

      - store_artifacts:
          path: /home/circleci/jenkins-plugin/stackrox-k8s-security-platform/target/stackrox-k8s-security-platform.hpi
          destination: artifacts
  provision-cluster-qa-tests:
   docker:
      - image: docker.io/stackrox/apollo-ci:0.2.8-2-g1e9382b6d6
        auth:
          username: $DOCKER_IO_PULL_USERNAME
          password: $DOCKER_IO_PULL_PASSWORD
   environment:
     - GCP_IMAGE_TYPE: "COS"
     - POD_SECURITY_POLICIES: "true"
   working_directory: /home/circleci/jenkins-plugin
   steps:
    - checkout
    - setup_remote_docker
    - provision-gke-cluster:
        cluster-id: qa-tests
        num-nodes: 2

  deploy-stackrox:
    docker:
      - image: docker.io/stackrox/apollo-ci:0.2.8-2-g1e9382b6d6
        auth:
          username: $DOCKER_IO_PULL_USERNAME
          password: $DOCKER_IO_PULL_PASSWORD
    parameters:
      orchestrator-flavor:
        type: string
        default: k8s
      require-cluster-admin:
        type: boolean
        default: false
      validate-autoupgrade-label:
        type: boolean
        default: false
      post-central-deploy-steps:
        type: steps
        default: []

    steps:
      - setup-gcp:
            docker-login: false
      - attach_workspace:
          at: /home/circleci/jenkins-plugin/
      - setup_remote_docker
      - attach-gke-cluster:
            cluster-id: qa-tests
      - run:
          name: Get Rox-ctl binary
          command: |
            docker login -u "$DOCKER_IO_PULL_USERNAME" -p "$DOCKER_IO_PULL_PASSWORD"
            cci-export REGISTRY_USERNAME "$DOCKER_IO_PULL_USERNAME"
            cci-export REGISTRY_PASSWORD "$DOCKER_IO_PULL_PASSWORD"
            containerId=$(docker create stackrox/main:3.0.35.0)
            docker cp $containerId:/assets/downloads/cli/roxctl-linux ./roxctl
      - run:
          name: Generate central bundle
          command: |
            ./roxctl central generate k8s pvc --main-image docker.io/stackrox/main:3.0.35.0
            export ROX_PASSWORD=$(cat central-bundle/password)
            cci-export ROX_USERNAME "admin"
            cci-export ROX_PASSWORD "$ROX_PASSWORD"
      - run:
          name: Deploy central to remote cluster
          command: |
            central-bundle/central/scripts/setup.sh
            kubectl create -R -f central-bundle/central

      - run:
          name: Deploy scanner to remote cluster
          command:  |
            kubectl create -R -f central-bundle/scanner

      - run:
          name: Creating License Key
          command: |
            cd /home/circleci/jenkins-plugin/
            ROX_LICENSE_KEY="$(./licenses/qa.sh --not-valid-after +6h)"
            cci-export ROX_LICENSE_KEY "$ROX_LICENSE_KEY"

      - run:
          name: Add license key to central
          command: |
            ./roxctl central license add--license="${ROX_LICENSE_KEY}"

      - run:
          name: Deploy sensor the remote cluster
          command: |
            export API_HOSTNAME=localhost
            export API_PORT=8000
            ./roxctl sensor generate k8s --name remote01
                                                     --collection-method kernel-module
                                                     --collector-image stackrox/collector
                                                     --image docker.io/stackrox/main:3.0.35.0
                                                     -e "${API_HOSTNAME}:${API_PORT}"  -p "${ROX_PASSWORD}"


            ./remote01/sensor.sh
            docker rm ${containerId}

      - *deleteClusterk8s


workflows:
  version: 2
  build:
    jobs:
      - build:
          <<: *runOnAllTagsWithDockerIOPullCtx
      - provision-cluster-qa-tests:
          <<: *runOnAllTagsWithDockerIOPullCtx
      - deploy-stackrox:
          <<: *runOnAllTagsWithDockerIOPullCtx
          orchestrator-flavor: k8s
          requires:
            - provision-cluster-qa-tests

      
commands:
  setup-gcp:
    parameters:
      docker-login:
        type: boolean
        default: true

    steps:
      - run:
          name: Setup deployment env
          command: |
            <<# parameters.docker-login >>
            docker login -u "$DOCKER_IO_PULL_USERNAME" -p "$DOCKER_IO_PULL_PASSWORD"
            <</ parameters.docker-login >>
            cci-export REGISTRY_USERNAME "$DOCKER_IO_PULL_USERNAME"
            cci-export REGISTRY_PASSWORD "$DOCKER_IO_PULL_PASSWORD"
            gcloud auth activate-service-account --key-file <(echo "$GCLOUD_SERVICE_ACCOUNT_CIRCLECI_ROX")
            gcloud auth list
            gcloud config set project stackrox-ci
            gcloud config set compute/region us-central1
            gcloud config unset compute/zone
            gcloud config set core/disable_prompts True

  create-gke:
    parameters:
      wait:
        type: boolean
        default: true

    steps:
      - run:
          name: Create GKE cluster
          command: |
            source .circleci/create-cluster.sh && create-cluster
            <<# parameters.wait >>
            wait-for-cluster
            <</ parameters.wait >>

  provision-gke-cluster:
    parameters:
      cluster-id:
        type: string
      num-nodes:
        type: integer
        default: 3

    steps:
      - setup-gcp:
          docker-login: false
      - run:
          name: Assign environment variables
          command: |
            CLUSTER_NAME="rox-jenkins-<< parameters.cluster-id >>-${CIRCLE_BUILD_NUM}"
            cci-export CLUSTER_NAME "$CLUSTER_NAME"
            echo "Assigned cluster name is $CLUSTER_NAME"

            NUM_NODES="<< parameters.num-nodes >>"
            cci-export NUM_NODES "$NUM_NODES"
            echo "Number of nodes for cluster is $NUM_NODES"

      - create-gke:
          wait: false

      - run:
          name: Save cluster config
          command: |
                  CONFIG_DIR="/home/circleci/jenkins-plugin/.ci-clusters/<< parameters.cluster-id >>"
                  mkdir -p "$CONFIG_DIR"
                  echo "$CLUSTER_NAME" >>"${CONFIG_DIR}/name"
                  gcloud config get-value compute/zone >>"${CONFIG_DIR}/zone"


      - *buildLivenessCheck

      - persist_to_workspace:
          root: /home/circleci/jenkins-plugin/
          paths:
            - .ci-clusters/<< parameters.cluster-id >>

  attach-gke-cluster:
    parameters:
      cluster-id:
        type: string

    steps:
      - run:
          name: Restore config for << parameters.cluster-id >> cluster
          command: |
            CONFIG_DIR="/home/circleci/jenkins-plugin/.ci-clusters/<< parameters.cluster-id >>"
            CLUSTER_NAME="$(cat "${CONFIG_DIR}/name")"
            [[ -n "$CLUSTER_NAME" ]]
            ZONE="$(cat "${CONFIG_DIR}/zone")"
            [[ -n "$ZONE" ]]
            gcloud config set compute/zone "$ZONE"
            cmd=(gcloud container clusters get-credentials --project stackrox-ci --zone "$ZONE" "$CLUSTER_NAME")
            "${cmd[@]}"
            echo "Restored config for cluster ${CLUSTER_NAME}"
            cci-export CLUSTER_NAME "$CLUSTER_NAME"
            echo
            echo "Run the following command to attach to the cluster:"
            echo
            printf " %q" "${cmd[@]}"
            echo

