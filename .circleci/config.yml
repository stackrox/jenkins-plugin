version: 2.1

jobs:
  build:
    docker:
      - image: docker.io/stackrox/apollo-ci:jenkins-plugin-0.2.8-1-ga776a448ee
        auth:
          username: $DOCKER_IO_PULL_USERNAME
          password: $DOCKER_IO_PULL_PASSWORD
    working_directory: /home/circleci/jenkins-plugin
    steps:
      - checkout

      - run:
          name: Build and package the Jenkins plugin
          command: |
            cd stackrox-k8s-security-platform
            mvn package
            mvn hpi:hpi

      - store_artifacts:
          path: /home/circleci/jenkins-plugin/stackrox-k8s-security-platform/target/stackrox-k8s-security-platform.hpi
          destination: artifacts

  prepare-environment-for-testing:
    docker:
      - image: docker.io/stackrox/apollo-ci:jenkins-plugin-0.2.8-1-ga776a448ee
        auth:
          username: $DOCKER_IO_PULL_USERNAME
          password: $DOCKER_IO_PULL_PASSWORD
    working_directory: /go/src/github.com/stackrox/rox
    environment:
      - GCP_IMAGE_TYPE: "COS"
      - POD_SECURITY_POLICIES: "true"
    steps:
      - checkout
      - provision-gke-cluster:
          cluster-id: k8s-tests
          num-nodes: 2

workflows:
  version: 2
  build:
    jobs:
      - build:
          context: docker-io-pull
          filters:
            tags:
              only: /.*/z
      - prepare-environment-for-testing:
          context: docker-io-pull
          filters:
            tags:
              only: /.*/z



buildLivenessCheck: &buildLivenessCheck
  run:
    name: Ensure workflow is still live
    command: |
      .circleci/check-workflow-live.sh


commands:
  setup-gcp:
    parameters:
      docker-login:
        type: boolean
        default: true

    steps:
      - run:
          name: Setup deployment env
          command: |
            <<# parameters.docker-login >>
            docker login -u "$DOCKER_IO_PULL_USERNAME" -p "$DOCKER_IO_PULL_PASSWORD"
            <</ parameters.docker-login >>
            cci-export REGISTRY_USERNAME "$DOCKER_IO_PULL_USERNAME"
            cci-export REGISTRY_PASSWORD "$DOCKER_IO_PULL_PASSWORD"
            cci-export MAIN_IMAGE_TAG "$(make --quiet tag)"
            cci-export GOOGLE_APPLICATION_CREDENTIALS /tmp/gcp.json
            if .circleci/pr_has_label.sh ci-run-against-rhel; then
              cci-export MAIN_IMAGE_REPO stackrox/main-rhel
              cci-export COLLECTOR_IMAGE_REPO stackrox/collector-rhel
              cci-export SCANNER_IMAGE "stackrox/scanner-rhel:$(cat "$(git rev-parse --show-toplevel)/LANGUAGE_SCANNER_VERSION")"
              cci-export SCANNER_DB_IMAGE "stackrox/scanner-db-rhel:$(cat "$(git rev-parse --show-toplevel)/LANGUAGE_SCANNER_VERSION")"
            fi
            gcloud auth activate-service-account --key-file <(echo "$GCLOUD_SERVICE_ACCOUNT_CIRCLECI_ROX")
            gcloud auth list
            gcloud config set project stackrox-ci
            gcloud config set compute/region us-central1
            gcloud config unset compute/zone
            gcloud config set core/disable_prompts True

  create-gke:
    parameters:
      wait:
        type: boolean
        default: true

    steps:
      - run:
          name: Create GKE cluster
          command: |
            source .circleci/create-cluster.sh && create-cluster
            <<# parameters.wait >>
            wait-for-cluster
            <</ parameters.wait >>

  provision-gke-cluster:
    parameters:
      cluster-id:
        type: string
      num-nodes:
        type: integer
        default: 3

    steps:
      - setup-gcp:
          docker-login: false
      - run:
          name: Assign environment variables
          command: |
            CLUSTER_NAME="rox-ci-<< parameters.cluster-id >>-${CIRCLE_BUILD_NUM}"
            cci-export CLUSTER_NAME "$CLUSTER_NAME"
            echo "Assigned cluster name is $CLUSTER_NAME"

            NUM_NODES="<< parameters.num-nodes >>"
            cci-export NUM_NODES "$NUM_NODES"
            echo "Number of nodes for cluster is $NUM_NODES"
      - create-gke:
          wait: false

      - run:
          name: Save cluster config
          command: |
                  CONFIG_DIR="/go/src/github.com/stackrox/rox/.ci-clusters/<< parameters.cluster-id >>"
                  mkdir -p "$CONFIG_DIR"
                  echo "$CLUSTER_NAME" >>"${CONFIG_DIR}/name"
                  gcloud config get-value compute/zone >>"${CONFIG_DIR}/zone"

      - *buildLivenessCheck

      - run:
          name: Tear down cluster upon failure
          command: |
            gcloud container clusters delete "$CLUSTER_NAME" --async
          when: on_fail

      - persist_to_workspace:
          root: /go/src/github.com/stackrox/rox
          paths:
            - .ci-clusters/<< parameters.cluster-id >>


