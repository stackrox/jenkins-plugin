syntax = "proto3";

option go_package = "v1";

import weak "google/api/annotations.proto";
import "storage/compliance.proto";
import "api/v1/search_service.proto";
import "api/v1/common.proto";
import "api/v1/empty.proto";

package v1;

// Next available tag: 4
message ComplianceAggregationRequest {
    repeated storage.ComplianceAggregation.Scope group_by = 1;
    storage.ComplianceAggregation.Scope          unit     = 2;

    RawQuery where = 3;
}

message ComplianceStandardMetadata {
    enum Scope {
        UNSET      = 0;
        CLUSTER    = 1;
        NAMESPACE  = 2;
        DEPLOYMENT = 3;
        NODE       = 4;
    }

    string id                     = 1 ;
    string name                   = 2 ;
    string description            = 3;
    int32  num_implemented_checks = 4;
    repeated Scope scopes         = 5;
    bool   dynamic                = 6;
}

message ComplianceControlGroup {
    string id                     = 1 ;
    string standard_id            = 2 ;
    string name                   = 3 ;
    string description            = 4;
    int32  num_implemented_checks = 5;
}

message ComplianceControl {
    string id          = 1 ;
    string standard_id = 2 ;
    string group_id    = 3 ;
    string name        = 4 ;
    string description = 5;

    bool implemented           = 6;
    string interpretation_text = 7;
}

message ComplianceStandard {
    ComplianceStandardMetadata metadata    = 1;
    repeated ComplianceControlGroup groups = 2 ;
    repeated ComplianceControl controls    = 3 ;
}

message GetComplianceStandardResponse {
    ComplianceStandard standard = 1;
}

message GetComplianceStandardsResponse {
    repeated ComplianceStandardMetadata standards = 1;
}

message ComplianceControlResultsResponse {
    repeated storage.ComplianceControlResult results = 1;
}

message GetComplianceRunResultsRequest {
    string cluster_id = 1;
    string standard_id = 2;

    // Specifies the run ID for which to return results. If empty, the most recent run is returned.
    // CAVEAT: Setting this field circumvents the results cache on the server-side, which may lead to significantly
    //         increased memory pressure and decreased performance.
    string run_id = 3;
}

message GetComplianceRunResultsResponse {
    storage.ComplianceRunResults results = 1;
    repeated storage.ComplianceRunMetadata failed_runs = 2;
}

service ComplianceService {
    rpc GetStandards(Empty) returns (GetComplianceStandardsResponse) {
        option (google.api.http) = {
            get: "/v1/compliance/standards"
        };
    }

    rpc GetStandard(ResourceByID) returns (GetComplianceStandardResponse) {
        option (google.api.http) = {
            get: "/v1/compliance/standards/{id}"
        };
    }

    rpc GetComplianceControlResults(RawQuery) returns (ComplianceControlResultsResponse) {
        option (google.api.http) = {
            get: "/v1/compliance/results"
        };
    }

    rpc GetRunResults(GetComplianceRunResultsRequest) returns (GetComplianceRunResultsResponse) {
        option (google.api.http) = {
            get: "/v1/compliance/runresults"
        };
    }

    rpc GetAggregatedResults(ComplianceAggregationRequest) returns (storage.ComplianceAggregation.Response) {
        option (google.api.http) = {
            get: "/v1/compliance/aggregatedresults"
        };
    }
}
