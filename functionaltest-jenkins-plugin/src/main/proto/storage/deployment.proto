syntax = "proto3";

option go_package = "storage";
option java_package = "io.stackrox.proto.storage";

import "google/protobuf/timestamp.proto";
import "storage/container_runtime.proto";
import "storage/labels.proto";
import "storage/image.proto";
import "storage/taints.proto";
import "storage/rbac.proto";

package storage;

// Next available tag: 34
message Deployment {
    string id                                  = 1 ;
    string name                                = 2 ;
    reserved 3;
    uint64 hash                                = 26 ;
    string type                                = 4 ;
    string namespace                           = 5 ;
    string namespace_id                        = 23 ;
    bool orchestrator_component                = 33 ;
    int64 replicas                             = 6;
    // TODO(ROX-6895): "Label" search term is ambiguous.
    map<string, string> labels                 = 7 ;
    map<string, string> pod_labels             = 19 ;
    LabelSelector label_selector               = 20;
    google.protobuf.Timestamp created          = 8 ;
    string cluster_id                          = 9 ;
    string cluster_name                        = 10 ;
    repeated Container containers              = 11;
    reserved 12;
    map<string, string> annotations            = 14 ;
    int64 priority                             = 15 ;
    bool inactive                              = 16;
    repeated string image_pull_secrets         = 17 ;
    string service_account                     = 18 ;
    PermissionLevel service_account_permission_level = 28 ;
    bool automount_service_account_token       = 25;
    bool host_network                          = 21 ;
    bool host_pid                              = 31 ;
    bool host_ipc                              = 32 ;
    repeated Toleration tolerations            = 22 ;
    repeated PortConfig ports                  = 24 ;

    int64 state_timestamp                      = 27 ; // Internal use only
    float risk_score                           = 29 ;

    repeated string process_tags               = 30 ;
}

message ContainerImage {

    // These tags maintain backwards compatibility with the previously embedded storage.Image
    string id = 4 ;
    ImageName name = 1;
    bool not_pullable  = 10;
}

message Container {
    string id                           = 1;
    ContainerConfig config              = 2;

    ContainerImage image                = 3;
    SecurityContext security_context    = 4;
    repeated Volume volumes             = 5;
    repeated PortConfig ports           = 6 ; // Policies use the port config on the top-level deployment.
    repeated EmbeddedSecret secrets     = 7;
    Resources resources                 = 8;

    repeated ContainerInstance instances = 9 ;
    string name                          = 10 ;
}

message Resources {
    float cpu_cores_request = 1 ;
    float cpu_cores_limit   = 2 ;
    float memory_mb_request = 3 ;
    float memory_mb_limit   = 4 ;
}

message Volume {
    enum MountPropagation {
        NONE              = 0;
        HOST_TO_CONTAINER = 1;
        BIDIRECTIONAL     = 2;
    }
    string name                        = 1 ;
    string source                      = 2 ;
    string destination                 = 3 ;
    bool read_only                     = 4 ;
    string type                        = 5 ;
    MountPropagation mount_propagation = 6 ;
}

// Pod represents information for a currently running pod or deleted pod in an active deployment.
message Pod {
    // Pod UID
    string id                                           = 1 ;
    string name                                         = 2 ;
    string deployment_id                                = 3 ;
    string namespace                                    = 4 ;
    string cluster_id                                   = 5 ;
    repeated ContainerInstance live_instances           = 6;
    // Must be a list of lists, so we can perform search queries (does not work for maps that aren't <string, string>)
    // There is one bucket (list) per container name.
    repeated ContainerInstanceList terminated_instances = 7 ;
    // Time Kubernetes reports the pod was created.
    google.protobuf.Timestamp started                   = 8;

    message ContainerInstanceList {
        repeated ContainerInstance instances = 1;
    }
}

// ContainerInstanceID allows to uniquely identify a container within a cluster.
message ContainerInstance {
    // The instance ID of this container.
    ContainerInstanceID instance_id    = 1;

    // The pod containing this container instance (kubernetes only).
    string containing_pod_id           = 2;

    // Container name.
    string container_name              = 6;

    // The IP addresses of this container.
    repeated string container_ips      = 3;

    // The start time of the container
    google.protobuf.Timestamp started  = 4;

    // Image ID
    string image_digest                = 5 ;

    // The finish time of the container, if it finished.
    google.protobuf.Timestamp finished = 7;

    // The exit code of the container. Only valid when finished is populated.
    int32 exit_code                    = 8;

    // The reason for the container's termination, if it finished.
    string termination_reason          = 9;
}

message ContainerInstanceID {
    // The runtime running this container.
    ContainerRuntime container_runtime = 1;
    // The ID of the container, specific to the given runtime.
    string id                          = 2;
    // The node on which this container runs.
    string node                        = 3;
}

message EmbeddedSecret {
    string name = 1 ;
    string path = 2 ;
}

// Next Available Tag: 6
message PortConfig {
    enum ExposureLevel {
        UNSET    = 0;
        EXTERNAL = 1;
        NODE     = 2;
        INTERNAL = 3;
        HOST     = 4;
    }

    message ExposureInfo {
        ExposureLevel level       = 1 ;

        // only set if level is not HOST
        string service_name       = 2 ;
        string service_id         = 3;
        string service_cluster_ip = 4;
        int32 service_port        = 5 ;

        // only set if level is HOST, NODE, or EXTERNAL
        int32 node_port = 6 ;

        // only set if level is EXTERNAL
        repeated string external_ips       = 7 ;
        repeated string external_hostnames = 8 ;
    }

    string name             = 1;
    int32 container_port    = 2 ;
    string protocol         = 3 ;

    ExposureLevel exposure       = 4 ;
    int32 exposed_port           = 5 ;

    repeated ExposureInfo exposure_infos = 6 ;
}

message ContainerConfig {
    message EnvironmentConfig {
        string key      = 1 ;
        string value    = 2 ;
        EnvVarSource env_var_source = 3 ;

        // For any update to EnvVarSource, please also update 'ui/src/messages/common.js'
        enum EnvVarSource {
            UNSET           = 0;
            RAW             = 1;
            SECRET_KEY      = 2;
            CONFIG_MAP_KEY  = 3;
            FIELD           = 4;
            RESOURCE_FIELD  = 5;
            UNKNOWN         = 6;
        }
    }
    repeated EnvironmentConfig env  = 1;
    repeated string command         = 2;
    repeated string args            = 3;
    string directory                = 4;
    string user                     = 5;
    int64 uid                       = 6;
    string app_armor_profile        = 7 ;
}

message SecurityContext {
    bool privileged                     = 1 ;
    message SELinux {
        string user     = 1;
        string role     = 2;
        string type     = 3;
        string level    = 4;
    }
    SELinux selinux                     = 2;
    repeated string drop_capabilities   = 3 ;
    repeated string add_capabilities    = 4 ;
    bool read_only_root_filesystem      = 5 ;

    message SeccompProfile {
        enum ProfileType {
            UNCONFINED      = 0;
            RUNTIME_DEFAULT = 1;
            LOCALHOST       = 2;
        }
        ProfileType type         = 1 ;
        string localhost_profile = 2;
    }
    SeccompProfile seccomp_profile = 6;
}

// Next available tag: 9
message ListDeployment {
    string                    id         = 1;
    uint64                    hash       = 8;
    string                    name       = 2;
    string                    cluster    = 3;
    string                    cluster_id = 4;
    string                    namespace  = 5;
    google.protobuf.Timestamp created    = 6;
    int64                     priority   = 7;
}
