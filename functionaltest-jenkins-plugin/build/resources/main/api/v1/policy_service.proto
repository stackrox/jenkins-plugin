syntax = "proto3";

option go_package = "v1";
option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "api/v1/common.proto";
import "api/v1/empty.proto";
import "api/v1/search_service.proto";
import "storage/policy.proto";

package v1;

message DryRunResponse {
    message Alert {
        string deployment          = 1;
        repeated string violations = 2;
    }
    repeated Alert alerts = 1;
    message Excluded {
        string deployment   = 1;
        storage.Whitelist whitelist = 2;
    }
    repeated Excluded excluded     = 2;
}

message PolicyCategoriesResponse {
    repeated string categories = 1;
}

message RenamePolicyCategoryRequest {
    string old_category = 1;
    string new_category = 2;
}

message EnableDisablePolicyNotificationRequest {
    string                     policy_id   = 1;
    repeated string            notifier_ids = 2;
    bool disable = 3;
}

message DeletePolicyCategoryRequest {
    string category = 1;
}

message ListPoliciesResponse {
    repeated storage.ListPolicy policies = 1;
}

message PatchPolicyRequest {
    string id         = 1;
    oneof set_disabled {
        bool disabled = 2;
    }
}

// PolicyService APIs can be used to manage policies.
service PolicyService {

    // GetPolicy returns the requested policy by ID.
    rpc GetPolicy (ResourceByID) returns (storage.Policy) {
        option (google.api.http) = {
            get: "/v1/policies/{id}"
        };
    }

    // ListPolicies returns the list of policies.
    rpc ListPolicies (RawQuery) returns (ListPoliciesResponse) {
        option (google.api.http) = {
            get: "/v1/policies"
        };
    }

    // PostPolicy creates a new policy.
    rpc PostPolicy (storage.Policy) returns (storage.Policy) {
        option (google.api.http) = {
            post: "/v1/policies"
            body: "*"
        };
    }

    // PutPolicy modifies an existing policy.
    rpc PutPolicy (storage.Policy) returns (Empty) {
        option (google.api.http) = {
            put: "/v1/policies/{id}"
            body: "*"
        };
    }

    // PatchPolicy edits an existing policy.
    rpc PatchPolicy (PatchPolicyRequest) returns (Empty) {
        option (google.api.http) = {
            patch: "/v1/policies/{id}"
            body: "*"
        };
    }

    // DeletePolicy removes a policy by ID.
    rpc DeletePolicy (ResourceByID) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/policies/{id}"
        };
    }

    // EnableDisablePolicyNotification enables or disables notifications for a policy by ID.
    rpc EnableDisablePolicyNotification (EnableDisablePolicyNotificationRequest) returns (Empty) {
        option (google.api.http) = {
            patch: "/v1/policies/{policy_id}/notifiers"
            body: "*"
        };
    }

    // ReassessPolicies reevaluates all the policies.
    rpc ReassessPolicies (Empty) returns (Empty) {
        option (google.api.http) = {
            post: "/v1/policies/reassess"
        };
    }

    // DryRunPolicy evaluates the given policy and returns any alerts without creating the policy.
    rpc DryRunPolicy (storage.Policy) returns (DryRunResponse) {
        option (google.api.http) = {
            post: "/v1/policies/dryrun"
            body: "*"
        };
    }

    // GetPolicyCategories returns the policy categories.
    rpc GetPolicyCategories (Empty) returns (PolicyCategoriesResponse) {
        option (google.api.http) = {
            get: "/v1/policyCategories"
        };
    }

    // RenamePolicyCategory renames the given policy category.
    rpc RenamePolicyCategory (RenamePolicyCategoryRequest) returns (Empty) {
        option (google.api.http) = {
            put: "/v1/policyCategories/{old_category}"
            body: "*"
        };
    }

    // DeletePolicyCategory removes the given policy category.
    rpc DeletePolicyCategory (DeletePolicyCategoryRequest) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/policyCategories/{category}"
        };
    }
}
