syntax = "proto3";

option go_package = "v1";

option java_package = "io.stackrox.proto.api.v1";

import weak "google/api/annotations.proto";
import "api/v1/empty.proto";
import "api/v1/common.proto";
import "storage/authz_plugin.proto";

package v1;

message GetAuthzPluginConfigsResponse {
    repeated storage.AuthzPluginConfig configs = 1;
}

message UpsertAuthzPluginConfigRequest {
    storage.AuthzPluginConfig config = 1;
    // When false, use the stored credentials of an existing scoped access control configuration given its ID.
    bool update_password = 2;
}

// ScopedAccessControlService manages configuration related to scoped access control.
service ScopedAccessControlService {

    // DryRunAuthzPluginConfig checks if the given scoped access control plugin is correctly configured.
    rpc DryRunAuthzPluginConfig (UpsertAuthzPluginConfigRequest) returns (Empty) {
        option (google.api.http) = {
            // Checks if the given scoped access control plugin is correctly configured, without stored credential reconciliation.
            post: "/v1/scopedaccessctrl/test"
            body: "config"
            additional_bindings {
              // Checks if the given scoped access control plugin is correctly configured, with optional stored credential reconciliation.
              post: "/v1/scopedaccessctrl/test/updated"
              body: "*"
            }
        };
    }

    // GetAuthzPluginConfigs returns all scoped access control plugins.
    rpc GetAuthzPluginConfigs (Empty) returns (GetAuthzPluginConfigsResponse) {
        option (google.api.http) = {
            get: "/v1/scopedaccessctrl/configs"
        };
    }

    // AddAuthzPluginConfig creates a scoped access control plugin.
    rpc AddAuthzPluginConfig (UpsertAuthzPluginConfigRequest) returns (storage.AuthzPluginConfig) {
        option (google.api.http) = {
            post: "/v1/scopedaccessctrl/config"
            body: "config"
        };
    }

    // UpdateAuthzPluginConfig modifies a scoped access control plugin.
    rpc UpdateAuthzPluginConfig (UpsertAuthzPluginConfigRequest) returns (storage.AuthzPluginConfig) {
        option (google.api.http) = {
            // Modifies a given scoped access control plugin, without stored credential reconciliation.
            put: "/v1/scopedaccessctrl/config/{config.id}"
            body: "config"
            additional_bindings {
              // Modifies a given scoped access control plugin, with optional stored credential reconciliation.
              patch: "/v1/scopedaccessctrl/config/{config.id}"
              body: "*"
            }
        };
    }

    // DeleteAuthzPluginConfig removes a scoped access control plugin.
    rpc DeleteAuthzPluginConfig (ResourceByID) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/scopedaccessctrl/config/{id}"
        };
    }
}
