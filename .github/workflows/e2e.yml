name: E2E

on:
  push:


jobs:
  build:
    runs-on: ubuntu-latest

    steps:


    - name: Run jenkins
      run: docker run -d --add-host host.docker.internal:host-gateway -p 8080:8080 jenkins/jenkins
    - name: Check jenkins
      run: |
        docker ps
        curl http://localhost:8080
    - uses: actions/checkout@v3
    - name: Cache Gradle Dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository
        key: gradle-v1-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ github.job }}
        restore-keys: |
          gradle-v1-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ github.job }}
          gradle-v1-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-
          gradle-v1-
    - name: Downgrade java
      run: |
        dnf -y install java-11-openjdk-devel
        alternatives --config java <<< '2'
    - name: Build with Maven
      run: cd stackrox-container-image-scanner && ./mvnw -B package hpi:hpi
    - name: Copy plugin to jenkins
      run: cp  stackrox-container-image-scanner/target/stackrox-container-image-scanner.hpi jenkins/
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build jenkins image
      uses: docker/build-push-action@v4
      with:
        tags: jenkins-test
        context: jenkins
        push: false
        load: true
    - name: Run jenkins
      run: docker run -d --add-host host.docker.internal:host-gateway -p 8080:8080 jenkins-test
    - uses: actions/checkout@v3
      with:
        repository: stackrox/stackrox
        path: stackrox
    - name: Create GKE cluster
      id: create-cluster
      env:
        OPENSHIFT_CI: true
        GCLOUD_SERVICE_ACCOUNT_OPENSHIFT_CI_ROX: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_OPENSHIFT_CI_ROX }}
      run: |
        cd stackrox
        export BUILD_ID=${GITHUB_RUN_ID}
        export JOB_NAME=${GITHUB_JOB}
        source "scripts/ci/gke.sh"
        provision_gke_cluster "jenkins-plugin-e2e" 3 e2-standard-4
        echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
        wait_for_cluster

    - name: Deploy Stackrox
      id: deploy
      run: |
        cd stackrox
        echo '#!/usr/bin/env bash\necho "Skipping sensor installation."' > deploy/k8s/sensor.sh
        MAIN_IMAGE_TAG=latest ./deploy/k8s/deploy-local.sh
        pass=$(cat deploy/k8s/central-deploy/password)
        echo "ROX_PASSWORD=$(cat deploy/k8s/central-deploy/password)" >> $GITHUB_OUTPUT

    - name: Restart proxy
      run: |
        export port=8000
        pid="$(lsof -n -i "tcp:${port}" | grep kubectl | awk '{print $2}' | uniq)"
        [[ -n "${pid}" ]] || { einfo "No kubectl port-forward is running on port ${port}."; exit 0; }
        kill "${pid}" || die "Kill failed"

    - name: Run tests
      env:
        ROX_PASSWORD: ${{ steps.deploy.outputs.ROX_PASSWORD }}
        ROX_ENDPOINT: https://localhost:8000
        JENKINS_ROX_ENDPOINT: https://host.docker.internal:8000
      run: make -C functionaltest-jenkins-plugin test
    - name: Teardown GKE cluster
      if: always() && steps.create-cluster.outputs.CLUSTER_NAME != ''
      env:
        OPENSHIFT_CI: true
        CLUSTER_NAME: ${{ steps.create-cluster.outputs.CLUSTER_NAME }}
      run: |
        source "stackrox/scripts/ci/gke.sh"
        teardown_gke_cluster
